package main

import "fmt"

/*
for

Go 只有一种循环结构：for 循环。

基本的 for 循环由三部分组成，它们用分号隔开：

    初始化语句：在第一次迭代前执行
    条件表达式：在每次迭代前求值
    后置语句：在每次迭代的结尾执行

初始化语句通常为一句短变量声明，该变量声明仅在 for 语句的作用域中可见。

一旦条件表达式的布尔值为 false，循环迭代就会终止。

注意：和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 { } 则是必须的。
*/

func main() {
	sum := 0
	/*
	每次循环迭代, range产生一对值;索引以及在该索引处的元素值。这个例子不需要索引, 但range的语法要求, 要处理元素, 必须处理索引。
	for index, value := range pc {

	一种思路是把索引赋值给一个临时变量, 如 temp , 然后忽略它的值,但Go语言不允许使用无用的局部变量(local variables),因为这会导致编译错误。
	Go语言中这种情况的解决方法是用 空标识符 (blankidentifier),即 _ (也就是下划线)。
	空标识符可用于任何语法需要变量名但程序逻辑不需要的时候, 例如, 在循环里,丢弃不需要的循环索引, 保留元素值。
	for _, value := range pc {

	range循环只使用了索引,省略了没有用到的值部分。循环也可以这样写
	for i, _ := range pc {

	我们可以使用一个简单的循环来统计字符串中字符的数目
	n := 0
	for _, _ = range s {
		n++
	}

	像其它形式的循环那样,我们也可以忽略不需要的变量
	n := 0
	for range s {
		n++
	}
	*/
	for i := 0; i < 10; i++ {
		sum += i
	}
	fmt.Println(sum)
}
